plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
}

android {
    namespace 'ca.maztheman.mmud'
    compileSdk 32

    defaultConfig {
        applicationId "ca.maztheman.mmud"
        minSdk 21
        targetSdk 32
        versionCode 1
        versionName "1.0"
        ndkVersion "23.1.7779620"
        ndk {
            abiFilters 'arm64-v8a'
        }
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        externalNativeBuild {
            cmake {
                cppFlags "-std=c++20 -lGLESv3"
                arguments '-DANDROID_STL=c++_static'
                version = "3.22.1"
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    externalNativeBuild {
        cmake {
            path "src/main/cpp/CMakeLists.txt"
            version = "3.22.1"
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        viewBinding true
    }

    sourceSets {
        main {
            // We're using SDLActivity from SDL sources, not copying that to our source tree
            //java.srcDirs += ['src/main/cpp/deps/SDL/android-project/app/src/main/java']
            // Instead of copying data files from the native project, we just add its data
            // as another asset directory
            assets.srcDirs += ['src/main/cpp/data']
        }
    }
}

/*
task conanInstall {
    def buildDir = new File("src/main/cpp/cmake")
    buildDir.mkdirs()
    def cmmd = "/usr/bin/conan install ../conanfile.txt --profile android_21_arm_clang --build missing"
    print(">> ${cmmd} \n")

    def sout = new StringBuilder(), serr = new StringBuilder()
    def proc = cmmd.execute(null, buildDir)
    proc.consumeProcessOutput(sout, serr)
    proc.waitFor()
    println "$sout $serr"
    if (proc.exitValue() != 0) {
        throw new Exception("out> $sout err> $serr" + "\nCommand: ${cmmd}")
    }
}*/

dependencies {

    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.5.1'
    implementation 'com.google.android.material:material:1.7.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.5.1'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.5.1'
    implementation 'androidx.coordinatorlayout:coordinatorlayout:1.2.0'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.4'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.0'
}